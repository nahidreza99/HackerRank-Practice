Lena is preparing for an important coding competition that is preceded by a number of sequential preliminary contests.
Initially, her luck balance is 0. She believes in "saving luck", and wants to check her theory.
Each contest is described by two integers, L[i] and T[i]:

>L[i] is the amount of luck associated with a contest. If Lena wins the contest, her luck balance will decrease by L[i];
if she loses it, her luck balance will increase by L[i].
>T[i] denotes the contest's importance rating. It's equal to 1 if the contest is important, and it's equal to 0 if it's unimportant.

If Lena loses no more than  important contests, what is the maximum amount of luck she can have after competing in all the preliminary contests?
This value may be negative.

Solution: O(n)
----------------------------------------------------------------------------------------
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'luckBalance' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. 2D_INTEGER_ARRAY contests
#

def luckBalance(k, contests):
    # Write your code here
    contests=sorted(contests,reverse=True,key=lambda x: x[0])
    luck = 0
    for x in range(len(contests)):
        if(k>0):
            if(contests[x][1]==1):
                luck+=contests[x][0]
                k-=1
            if(contests[x][1]==0):
                luck+=contests[x][0]
        else:
            if(contests[x][1]==1):
                luck-=contests[x][0]
            else:
                luck+=contests[x][0]
    return luck
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    contests = []

    for _ in range(n):
        contests.append(list(map(int, input().rstrip().split())))

    result = luckBalance(k, contests)

    fptr.write(str(result) + '\n')

    fptr.close()
